import { useEffect, useState } from "react";
import { toast } from "sonner";
import { Booking } from "../interfaces/booking.interface";
import { Job } from "../interfaces/job.interface";
import { PartItem } from "../interfaces/partItem.interface";
import { JobService } from "../services/job.service";
import { Loader } from "./Loader";
import { RiCloseLine, RiAddLine, RiSaveLine, RiUserLine } from "react-icons/ri";
import { format } from "date-fns";
import { zipCodeRegex, allowedPostCodeRegex } from "../helpers/helpers";

interface BookingEditDialogProps {
    isOpen: boolean;
    onClose: () => void;
    booking: Booking | null;
    onSave: (updatedBooking: Booking) => void | Promise<void>;
    isAdmin?: boolean;
    carId?: string; // For new bookings (client mode)
}

/**
 * Normalize booking data to ensure all required fields are present and have the correct type
 */
const normalizeBookingData = (booking: Booking): Booking => {
    const normalizedBooking = { ...booking };

    // Ensure arrays
    if (!Array.isArray(normalizedBooking.jobs)) normalizedBooking.jobs = [];
    if (!Array.isArray(normalizedBooking.partItems)) normalizedBooking.partItems = [];
    if (!Array.isArray(normalizedBooking.schedules)) normalizedBooking.schedules = [];
    if (!Array.isArray(normalizedBooking.jobsPrices)) normalizedBooking.jobsPrices = [];
    if (typeof normalizedBooking.partItemsPrices !== 'object' || normalizedBooking.partItemsPrices === null || Array.isArray(normalizedBooking.partItemsPrices)) {
        normalizedBooking.partItemsPrices = {};
    }

    // Ensure other required fields
    if (!normalizedBooking.location) normalizedBooking.location = { postalCode: '' };
    if (!normalizedBooking.car) normalizedBooking.car = {
        id: '',
        carNumber: '',
        make: '',
        model: '',
        bookings: [],
        engineSize: '',
        dateOfManufacture: '',
        tecDocKType: '',
        vin: '',
        createdAt: '',
        updatedAt: ''
    };

    return normalizedBooking;
};

/**
 * BookingEditDialog component
 * Reusable component for creating and editing bookings
 * Works in both admin and client modes
 */
export const BookingEditDialog = ({
    isOpen,
    onClose,
    booking,
    onSave,
    isAdmin = false,
    carId
}: BookingEditDialogProps) => {
    // Local state for editing
    const [editedBooking, setEditedBooking] = useState<Booking | null>(null);
    const [activeTab, setActiveTab] = useState('overview'); // Default to overview tab

    // State for part items selection
    const [availablePartItems, setAvailablePartItems] = useState<PartItem[]>([]);
    const [isLoadingParts, setIsLoadingParts] = useState(false);
    const [partsError, setPartsError] = useState<string | null>(null);
    const [partsSearchQuery, setPartsSearchQuery] = useState('');
    const [partsMode, setPartsMode] = useState<'existing' | 'add-new'>('existing'); // New state for parts mode
    
    // Enhanced filtering and sorting state
    const [selectedTier, setSelectedTier] = useState<string>('all');
    const [selectedCategory, setSelectedCategory] = useState<string>('all');
    const [selectedGroup, setSelectedGroup] = useState<string>('all');
    const [stockFilter, setStockFilter] = useState<string>('all');
    const [sortBy, setSortBy] = useState<string>('name');
    const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');
    const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
    const [groupByCategory, setGroupByCategory] = useState<boolean>(true);

    // State for jobs selection
    const [availableJobs, setAvailableJobs] = useState<Job[]>([]);
    const [isLoadingJobs, setIsLoadingJobs] = useState(false);
    const [jobsError, setJobsError] = useState<string | null>(null);
    const [jobsSearchQuery, setJobsSearchQuery] = useState('');

    // State for schedule management
    const [newSchedule, setNewSchedule] = useState({
        startTime: '09:00',
        endTime: '10:00',
        selectedDates: [] as string[]
    });
    const [scheduleErrors, setScheduleErrors] = useState<string[]>([]);

    // Reset state when dialog opens with new booking
    useEffect(() => {
        if (booking) {
            // Normalize the booking data to ensure consistent structure
            setEditedBooking(normalizeBookingData(booking));
            // Reset tabs and search
            setActiveTab('overview');
            setPartsSearchQuery('');
            setJobsSearchQuery('');
        } else if (isOpen && !booking && carId) {
            // Create a new booking
            const newBooking: Booking = {
                id: `temp-${Date.now()}`,
                car: {
                    id: carId,
                    carNumber: '',
                    make: '',
                    model: '',
                    bookings: [],
                    engineSize: '',
                    dateOfManufacture: '',
                    tecDocKType: '',
                    vin: '',
                    createdAt: '',
                    updatedAt: ''
                },
                jobs: [],
                location: { postalCode: '' },
                schedules: [],
                jobsPrices: [],
                partItemsPrices: {},
                partItems: [],
                totalPrice: 0,
                createdAt: new Date().toISOString(),
                status: 'pending'
            };
            setEditedBooking(newBooking);
            // Set active tab to jobs for new bookings
            setActiveTab('jobs');
        }
    }, [booking, isOpen, carId]);

    // Fetch available part items and jobs when the dialog opens
    useEffect(() => {
        if (isOpen) {
            // Only fetch jobs automatically - parts will be fetched on demand
            fetchAvailableJobs();
            
            // For new bookings (no existing booking), fetch parts automatically
            if (!booking && carId) {
                fetchAvailablePartItems();
            }
        }
    }, [isOpen, booking, carId]);

    // Function to fetch available part items
    const fetchAvailablePartItems = async () => {
        setIsLoadingParts(true);
        setPartsError(null);

        try {
            // Always try car-specific gold-in-stock endpoint first if we have a car ID
            // Priority: 1. Car ID from booking, 2. Car ID from props, 3. Fallback to general endpoint
            const bookingCarId = editedBooking?.car?.id;
            const effectiveCarId = bookingCarId || carId;
            
            console.log('BookingEditDialog - fetchAvailablePartItems - Booking Car ID:', bookingCarId);
            console.log('BookingEditDialog - fetchAvailablePartItems - Props Car ID:', carId);
            console.log('BookingEditDialog - fetchAvailablePartItems - Effective Car ID:', effectiveCarId);
            
            if (effectiveCarId) {
                // Use the car-specific gold-in-stock endpoint
                console.log('BookingEditDialog - Using car-specific endpoint:', `/api/part-items/car/${effectiveCarId}/gold-in-stock`);
                const response = await JobService.getCarPartItems(effectiveCarId);
                if (response.responseObject) {
                    const partItemsData = Array.isArray(response.responseObject)
                        ? response.responseObject
                        : [response.responseObject];

                    console.log('BookingEditDialog - Car-specific parts loaded:', partItemsData.length, 'parts');
                    setAvailablePartItems(partItemsData);
                } else {
                    console.log('BookingEditDialog - No parts returned from car-specific endpoint');
                    setAvailablePartItems([]);
                }
            } else {
                // Fallback to general endpoint only if no car ID is available
                console.log('BookingEditDialog - No car ID available, using general endpoint');
                const response = await JobService.getAllPartItems();
                if (response.responseObject) {
                    const partItemsData = Array.isArray(response.responseObject)
                        ? response.responseObject
                        : [response.responseObject];

                    console.log('BookingEditDialog - General parts loaded:', partItemsData.length, 'parts');
                    setAvailablePartItems(partItemsData);
                } else {
                    console.log('BookingEditDialog - No parts returned from general endpoint');
                    setAvailablePartItems([]);
                }
            }
        } catch (error) {
            console.error("Error fetching part items:", error);
            setPartsError("Failed to load available part items");
        } finally {
            setIsLoadingParts(false);
        }
    };

    // Function to fetch available jobs
    const fetchAvailableJobs = async () => {
        setIsLoadingJobs(true);
        setJobsError(null);

        try {
            const response = await JobService.getAllJobs();
            if (response.responseObject) {
                const jobsData = Array.isArray(response.responseObject)
                    ? response.responseObject
                    : [response.responseObject];

                setAvailableJobs(jobsData);
            } else {
                setAvailableJobs([]);
            }
        } catch (error) {
            console.error("Error fetching jobs:", error);
            setJobsError("Failed to load available jobs");
        } finally {
            setIsLoadingJobs(false);
        }
    };

    if (!isOpen || !editedBooking) return null;

    // Handler for job updates
    const handleJobChange = (index: number, field: string, value: string | number | boolean) => {
        const updatedJobs = [...editedBooking.jobs];
        updatedJobs[index] = { ...updatedJobs[index], [field]: value };

        setEditedBooking({
            ...editedBooking,
            jobs: updatedJobs
        });
    };

    // Handler for schedule updates
    const handleScheduleChange = (index: number, field: string, value: string | boolean | string[]) => {
        const newSchedules = [...(editedBooking.schedules || [])];
        newSchedules[index] = {
            ...newSchedules[index],
            [field]: value
        };

        setEditedBooking({
            ...editedBooking,
            schedules: newSchedules
        });
    };

    // Remove a job
    const handleRemoveJob = (index: number) => {
        const updatedJobs = [...editedBooking.jobs];
        const removedJob = updatedJobs[index];
        updatedJobs.splice(index, 1);

        // Also remove from jobsPrices
        const updatedJobsPrices = editedBooking.jobsPrices.filter(jp => jp.id !== removedJob.id);

        setEditedBooking({
            ...editedBooking,
            jobs: updatedJobs,
            jobsPrices: updatedJobsPrices
        });
    };

    // Remove a schedule
    const handleRemoveSchedule = (index: number) => {
        const newSchedules = [...(editedBooking.schedules || [])];
        newSchedules.splice(index, 1);

        setEditedBooking({
            ...editedBooking,
            schedules: newSchedules
        });
    };

    // Add a new schedule
    const handleAddSchedule = () => {
        const newSchedule = {
            id: `temp-${Date.now()}`,
            timeInterval: '09:00-10:00',
            dates: [format(new Date(), 'yyyy-MM-dd')]
        };

        setEditedBooking({
            ...editedBooking,
            schedules: [...(editedBooking.schedules || []), newSchedule]
        });
    };

    // Handle save
    const handleSave = async () => {
        if (editedBooking) {
            try {
                await onSave(editedBooking);
                // Only close if onSave succeeds (doesn't throw an error)
                onClose();
            } catch (error) {
                // If onSave throws an error, don't close the modal
                console.error('Save operation failed:', error);
                // The error handling and toast should be done in the onSave callback
            }
        }
    };

    // Helper function to get tier badge styles
    const getTierBadgeClasses = (tier: string): string => {
        const tierLower = tier?.toLowerCase();
        switch (tierLower) {
            case 'gold':
                return 'bg-yellow-100 text-yellow-800';
            case 'silver':
                return 'bg-gray-200 text-gray-800';
            case 'bronze':
                return 'bg-orange-100 text-orange-800';
            default:
                return 'bg-blue-100 text-blue-800'; // Default/Standard tier style
        }
    };

    // Helper functions for filtering and sorting
    const getUniqueCategories = () => {
        const categories = availablePartItems
            .map(part => part.categoryTitle)
            .filter(Boolean)
            .filter((value, index, self) => self.indexOf(value) === index);
        return categories.sort();
    };

    const getUniqueGroups = () => {
        const groups = availablePartItems
            .flatMap(part => part.groups || [])
            .filter((value, index, self) => self.indexOf(value) === index);
        return groups.sort();
    };

    const getUniqueTiers = () => {
        const tiers = availablePartItems
            .map(part => part.tier)
            .filter(Boolean)
            .filter((value, index, self) => self.indexOf(value) === index);
        return tiers.sort();
    };

    // Group parts by category
    const getGroupedPartsByCategory = (parts: PartItem[]) => {
        const grouped: { [key: string]: { parts: PartItem[], categoryImage?: string } } = {};
        
        parts.forEach(part => {
            const category = part.categoryTitle || 'Uncategorized';
            if (!grouped[category]) {
                grouped[category] = {
                    parts: [],
                    categoryImage: part.categoryImage
                };
            }
            grouped[category].parts.push(part);
        });

        // Sort categories alphabetically
        const sortedCategories = Object.keys(grouped).sort();
        const sortedGrouped: { [key: string]: { parts: PartItem[], categoryImage?: string } } = {};
        
        sortedCategories.forEach(category => {
            sortedGrouped[category] = grouped[category];
        });

        return sortedGrouped;
    };

    // Filter and sort parts
    const getFilteredAndSortedParts = () => {
        const filtered = availablePartItems.filter(part => {
            // Text search
            if (partsSearchQuery.trim()) {
                const search = partsSearchQuery.toLowerCase();
                const matchesSearch = (
                    (part.title?.toLowerCase() ?? '').includes(search) ||
                    (part.sku?.toLowerCase() ?? '').includes(search) ||
                    (part.categoryTitle?.toLowerCase() ?? '').includes(search) ||
                    (part.groups?.some(group => group.toLowerCase().includes(search)) ?? false)
                );
                if (!matchesSearch) return false;
            }

            // Tier filter
            if (selectedTier !== 'all' && part.tier?.toLowerCase() !== selectedTier.toLowerCase()) {
                return false;
            }

            // Category filter
            if (selectedCategory !== 'all' && part.categoryTitle !== selectedCategory) {
                return false;
            }

            // Group filter
            if (selectedGroup !== 'all' && !part.groups?.includes(selectedGroup)) {
                return false;
            }

            // Stock filter
            if (stockFilter === 'in-stock' && !part.stockSummary?.toLowerCase().includes('in stock')) {
                return false;
            }
            if (stockFilter === 'out-of-stock' && part.stockSummary?.toLowerCase().includes('in stock')) {
                return false;
            }

            return true;
        });

        // Sort parts
        filtered.sort((a, b) => {
            let aValue: string | number = '';
            let bValue: string | number = '';

            switch (sortBy) {
                case 'name':
                    aValue = a.title?.toLowerCase() || '';
                    bValue = b.title?.toLowerCase() || '';
                    break;
                case 'sku':
                    aValue = a.sku?.toLowerCase() || '';
                    bValue = b.sku?.toLowerCase() || '';
                    break;
                case 'price':
                    aValue = a.priceForConsumer || 0;
                    bValue = b.priceForConsumer || 0;
                    break;
                case 'tier': {
                    const tierOrder = { 'gold': 3, 'silver': 2, 'bronze': 1 };
                    aValue = tierOrder[a.tier?.toLowerCase() as keyof typeof tierOrder] || 0;
                    bValue = tierOrder[b.tier?.toLowerCase() as keyof typeof tierOrder] || 0;
                    break;
                }
                case 'category':
                    aValue = a.categoryTitle?.toLowerCase() || '';
                    bValue = b.categoryTitle?.toLowerCase() || '';
                    break;
                case 'stock':
                    aValue = a.stockSummary?.toLowerCase().includes('in stock') ? 1 : 0;
                    bValue = b.stockSummary?.toLowerCase().includes('in stock') ? 1 : 0;
                    break;
                default:
                    aValue = a.title?.toLowerCase() || '';
                    bValue = b.title?.toLowerCase() || '';
            }

            if (typeof aValue === 'string' && typeof bValue === 'string') {
                return sortOrder === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
            } else {
                return sortOrder === 'asc' ? (aValue as number) - (bValue as number) : (bValue as number) - (aValue as number);
            }
        });

        return filtered;
    };

    // Reset filters
    const resetFilters = () => {
        setPartsSearchQuery('');
        setSelectedTier('all');
        setSelectedCategory('all');
        setSelectedGroup('all');
        setStockFilter('all');
        setSortBy('name');
        setSortOrder('asc');
        setGroupByCategory(true);
    };

    // Helper function to calculate total job duration in minutes
    const getTotalJobDuration = () => {
        return editedBooking.jobs.reduce((total, job) => total + job.duration, 0);
    };

    // Helper function to calculate time interval duration in minutes
    const getIntervalDuration = (timeInterval: string) => {
        const [start, end] = timeInterval.split('-');
        if (!start || !end) return 0;
        
        const [startHour, startMin] = start.split(':').map(Number);
        const [endHour, endMin] = end.split(':').map(Number);
        
        const startMinutes = startHour * 60 + startMin;
        const endMinutes = endHour * 60 + endMin;
        
        return endMinutes - startMinutes;
    };

    // Helper function to format time interval
    const formatTimeInterval = (startTime: string, endTime: string) => {
        return `${startTime}-${endTime}`;
    };

    // Helper function to validate schedule
    const validateSchedule = (startTime: string, endTime: string, dates: string[]) => {
        const errors: string[] = [];
        
        if (!startTime || !endTime) {
            errors.push('Start time and end time are required');
        }
        
        if (dates.length === 0) {
            errors.push('At least one date must be selected');
        }
        
        const intervalDuration = getIntervalDuration(formatTimeInterval(startTime, endTime));
        const requiredDuration = getTotalJobDuration();
        
        if (intervalDuration < requiredDuration) {
            errors.push(`Time interval (${intervalDuration} min) must be at least ${requiredDuration} minutes to accommodate all selected jobs`);
        }
        
        if (startTime >= endTime) {
            errors.push('End time must be after start time');
        }
        
        return errors;
    };

    // Handler for adding a new schedule
    const handleAddNewSchedule = () => {
        const errors = validateSchedule(newSchedule.startTime, newSchedule.endTime, newSchedule.selectedDates);
        
        if (errors.length > 0) {
            setScheduleErrors(errors);
            return;
        }
        
        const timeInterval = formatTimeInterval(newSchedule.startTime, newSchedule.endTime);
        const newScheduleObj = {
            id: `schedule-${Date.now()}`,
            timeInterval,
            dates: [...newSchedule.selectedDates]
        };
        
        setEditedBooking({
            ...editedBooking,
            schedules: [...(editedBooking.schedules || []), newScheduleObj]
        });
        
        // Reset form
        setNewSchedule({
            startTime: '09:00',
            endTime: '10:00',
            selectedDates: []
        });
        setScheduleErrors([]);
        
        toast.success('Schedule added successfully');
    };

    // Handler for removing a schedule
    const handleRemoveScheduleNew = (scheduleId: string) => {
        const updatedSchedules = editedBooking.schedules.filter(s => s.id !== scheduleId);
        setEditedBooking({
            ...editedBooking,
            schedules: updatedSchedules
        });
        toast.success('Schedule removed');
    };

    // Handler for adding/removing dates
    const handleDateToggle = (date: string) => {
        const updatedDates = newSchedule.selectedDates.includes(date)
            ? newSchedule.selectedDates.filter(d => d !== date)
            : [...newSchedule.selectedDates, date];
        
        setNewSchedule({
            ...newSchedule,
            selectedDates: updatedDates
        });
    };

    // Generate next 30 days for date selection
    const getNext30Days = () => {
        const days = [];
        const today = new Date();
        
        for (let i = 0; i < 30; i++) {
            const date = new Date(today);
            date.setDate(today.getDate() + i);
            days.push({
                date: date.toISOString().split('T')[0],
                display: date.toLocaleDateString('en-GB', { 
                    weekday: 'short', 
                    month: 'short', 
                    day: 'numeric' 
                }),
                isToday: i === 0,
                dayOfWeek: date.getDay()
            });
        }
        
        return days;
    };

    return (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50 p-4 overflow-y-auto">
            <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full p-6 animate-fade-in max-h-[90vh] overflow-y-auto">
                <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold text-gray-900">
                        {booking ? 'Edit Booking' : 'Create New Booking'}
                        {editedBooking.car.carNumber && ` - ${editedBooking.car.carNumber}`}
                    </h2>
                    <button
                        onClick={onClose}
                        className="text-gray-500 hover:text-gray-700"
                    >
                        <RiCloseLine size={24} />
                    </button>
                </div>

                {/* Totals Summary at Top */}
                <div className="bg-gradient-to-r from-indigo-50 to-blue-50 border border-indigo-200 rounded-lg p-4 mb-4">
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <div className="text-center">
                            <div className="text-sm text-gray-600">Jobs Total</div>
                            <div className="text-lg font-semibold text-indigo-600">
                                £{editedBooking.jobsPrices.reduce((sum, jp) => sum + jp.price, 0).toFixed(2)}
                            </div>
                            <div className="text-xs text-gray-500">
                                {editedBooking.jobs.length} job{editedBooking.jobs.length !== 1 ? 's' : ''}
                            </div>
                        </div>
                        <div className="text-center">
                            <div className="text-sm text-gray-600">Parts Total</div>
                            <div className="text-lg font-semibold text-indigo-600">
                                £{Object.values(editedBooking.partItemsPrices || {})
                                    .reduce((sum, priceObj) => sum + (priceObj.price || 0), 0)
                                    .toFixed(2)}
                            </div>
                            <div className="text-xs text-gray-500">
                                {editedBooking.partItems.length} part{editedBooking.partItems.length !== 1 ? 's' : ''}
                            </div>
                        </div>
                        <div className="text-center">
                            <div className="text-sm text-gray-600">Subtotal</div>
                            <div className="text-lg font-semibold text-gray-700">
                                £{(
                                    editedBooking.jobsPrices.reduce((sum, jp) => sum + jp.price, 0) +
                                    Object.values(editedBooking.partItemsPrices || {})
                                        .reduce((sum, priceObj) => sum + (priceObj.price || 0), 0)
                                ).toFixed(2)}
                            </div>
                            <div className="text-xs text-gray-500">
                                VAT: £{(
                                    (editedBooking.jobsPrices.reduce((sum, jp) => sum + jp.price, 0) +
                                    Object.values(editedBooking.partItemsPrices || {})
                                        .reduce((sum, priceObj) => sum + (priceObj.price || 0), 0)) * 0.20
                                ).toFixed(2)}
                            </div>
                        </div>
                        <div className="text-center">
                            <div className="text-sm text-gray-600">Total (inc. VAT)</div>
                            <div className="text-xl font-bold text-green-600">
                                £{(
                                    (editedBooking.jobsPrices.reduce((sum, jp) => sum + jp.price, 0) +
                                    Object.values(editedBooking.partItemsPrices || {})
                                        .reduce((sum, priceObj) => sum + (priceObj.price || 0), 0)) * 1.20
                                ).toFixed(2)}
                            </div>
                            <div className="text-xs text-green-600 font-medium">
                                Final Price
                            </div>
                        </div>
                    </div>
                </div>

                {/* Tabs */}
                <div className="border-b border-gray-200 mb-4">
                    <nav className="flex -mb-px space-x-8">
                        <button
                            onClick={() => setActiveTab('overview')}
                            className={`py-2 px-1 border-b-2 font-medium text-sm ${activeTab === 'overview'
                                ? 'border-indigo-500 text-indigo-600'
                                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                }`}
                        >
                            Overview
                        </button>
                        <button
                            onClick={() => setActiveTab('jobs')}
                            className={`py-2 px-1 border-b-2 font-medium text-sm ${activeTab === 'jobs'
                                ? 'border-indigo-500 text-indigo-600'
                                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                }`}
                        >
                            Jobs ({editedBooking.jobs.length})
                        </button>
                        <button
                            onClick={() => setActiveTab('parts')}
                            className={`py-2 px-1 border-b-2 font-medium text-sm ${activeTab === 'parts'
                                ? 'border-indigo-500 text-indigo-600'
                                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                }`}
                        >
                            Parts ({editedBooking.partItems.length})
                        </button>
                        <button
                            onClick={() => setActiveTab('schedule')}
                            className={`py-2 px-1 border-b-2 font-medium text-sm ${activeTab === 'schedule'
                                ? 'border-indigo-500 text-indigo-600'
                                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                }`}
                        >
                            Schedule ({editedBooking.schedules.length})
                        </button>
                        <button
                            onClick={() => setActiveTab('location')}
                            className={`py-2 px-1 border-b-2 font-medium text-sm ${activeTab === 'location'
                                ? 'border-indigo-500 text-indigo-600'
                                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                }`}
                        >
                            Location
                        </button>
                        {isAdmin && (
                            <button
                                onClick={() => setActiveTab('assignment')}
                                className={`py-2 px-1 border-b-2 font-medium text-sm ${activeTab === 'assignment'
                                    ? 'border-indigo-500 text-indigo-600'
                                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                    }`}
                            >
                                Assignment
                            </button>
                        )}
                    </nav>
                </div>

                {/* Tab content */}
                <div className="mb-6">
                    {/* Overview Tab */}
                    {activeTab === 'overview' && (
                        <div>
                            <h3 className="text-lg font-medium mb-4">Booking Overview</h3>

                            {/* Jobs Section */}
                            <div className="mb-6">
                                <h4 className="text-sm font-semibold uppercase text-gray-600 border-b pb-2 mb-3">
                                    Jobs ({editedBooking.jobs.length})
                                </h4>
                                {editedBooking.jobs.length > 0 ? (
                                    <div className="bg-gray-50 rounded-lg p-4">
                                        <div className="space-y-2">
                                            {editedBooking.jobs.map((job) => {
                                                const jobPrice = editedBooking.jobsPrices.find(jp => jp.id === job.id);
                                                const totalJobPrice = job.pricePerHour ? (job.pricePerHour * job.duration) / 60 : 0;
                                                
                                                return (
                                                    <div key={job.id} className="flex justify-between items-center text-sm bg-white rounded-lg p-3 border">
                                                        <div className="flex-grow">
                                                            <span className="font-medium">{job.name}</span>
                                                            <span className="text-gray-500 ml-2">({job.duration} min)</span>
                                                            {job.description && (
                                                                <div className="text-xs text-gray-500 mt-1">{job.description}</div>
                                                            )}
                                                        </div>
                                                        <div className="flex items-center gap-2">
                                                            <div className="text-right">
                                                                <div className="font-medium">£{(jobPrice?.price || totalJobPrice).toFixed(2)}</div>
                                                                {job.pricePerHour && (
                                                                    <div className="text-xs text-gray-500">
                                                                        £{job.pricePerHour.toFixed(2)}/hr
                                                                    </div>
                                                                )}
                                                            </div>
                                                            <button
                                                                onClick={() => {
                                                                    // Remove the job from jobs array
                                                                    const updatedJobs = editedBooking.jobs.filter(j => j.id !== job.id);
                                                                    // Remove from jobsPrices array
                                                                    const updatedJobsPrices = editedBooking.jobsPrices.filter(jp => jp.id !== job.id);

                                                                    setEditedBooking({
                                                                        ...editedBooking,
                                                                        jobs: updatedJobs,
                                                                        jobsPrices: updatedJobsPrices
                                                                    });

                                                                    toast.success(`Removed ${job.name} from booking`);
                                                                }}
                                                                className="text-red-600 hover:text-red-800 p-1 rounded-full hover:bg-red-50 flex-shrink-0"
                                                                title={`Remove ${job.name}`}
                                                            >
                                                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                                </svg>
                                                            </button>
                                                        </div>
                                                    </div>
                                                );
                                            })}
                                        </div>
                                        <div className="border-t border-gray-300 pt-2 mt-3">
                                            <div className="flex justify-between items-center font-bold text-lg">
                                                <span>Total Jobs:</span>
                                                <span>£{editedBooking.jobsPrices.reduce((sum, jp) => sum + jp.price, 0).toFixed(2)}</span>
                                            </div>
                                            <div className="text-xs text-gray-500 text-right">
                                                Total Duration: {editedBooking.jobs.reduce((sum, job) => sum + job.duration, 0)} minutes
                                            </div>
                                        </div>
                                    </div>
                                ) : (
                                    <p className="text-gray-500 text-sm italic">No jobs added</p>
                                )}
                            </div>

                            {/* Parts Section */}
                            <div className="mb-6">
                                <h4 className="text-sm font-semibold uppercase text-gray-600 border-b pb-2 mb-3">
                                    Parts ({editedBooking.partItems.length})
                                </h4>
                                {editedBooking.partItems.length > 0 ? (
                                    <div className="bg-gray-50 rounded-lg p-4">
                                        <div className="space-y-2">
                                            {editedBooking.partItems.map((part) => {
                                                const partPrice = editedBooking.partItemsPrices?.[part.id];
                                                const displayPrice = partPrice ? partPrice.price : part.priceForConsumer || 0;

                                                return (
                                                    <div key={part.id} className="flex justify-between items-center text-sm bg-white rounded-lg p-3 border">
                                                        <div className="flex-grow">
                                                            <span className="font-medium">{part.title}</span>
                                                            <span className="text-gray-500 ml-2">({part.sku})</span>
                                                            {part.tier && (
                                                                <span className={`ml-2 px-2 py-0.5 rounded-full text-xs ${getTierBadgeClasses(part.tier)}`}>
                                                                    {part.tier}
                                                                </span>
                                                            )}
                                                        </div>
                                                        <div className="flex items-center gap-2">
                                                            <div className="text-right">
                                                                <div className="font-medium">£{displayPrice.toFixed(2)}</div>
                                                                {isAdmin && part.price && (
                                                                    <div className="text-xs text-gray-500">
                                                                        Cost: £{part.price.toFixed(2)}
                                                                    </div>
                                                                )}
                                                            </div>
                                                            <button
                                                                onClick={() => {
                                                                    // Remove the part from partItems array
                                                                    const updatedPartItems = editedBooking.partItems.filter(p => p.id !== part.id);
                                                                    // Remove the price from partItemsPrices object
                                                                    const updatedPrices = { ...editedBooking.partItemsPrices };
                                                                    delete updatedPrices[part.id];

                                                                    setEditedBooking({
                                                                        ...editedBooking,
                                                                        partItems: updatedPartItems,
                                                                        partItemsPrices: updatedPrices
                                                                    });

                                                                    toast.success(`Removed ${part.title} from booking`);
                                                                }}
                                                                className="text-red-600 hover:text-red-800 p-1 rounded-full hover:bg-red-50 flex-shrink-0"
                                                                title={`Remove ${part.title}`}
                                                            >
                                                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                                </svg>
                                                            </button>
                                                        </div>
                                                    </div>
                                                );
                                            })}
                                        </div>
                                        <div className="border-t border-gray-300 pt-2 mt-3">
                                            <div className="flex justify-between items-center font-bold text-lg">
                                                <span>Total Parts:</span>
                                                <span>
                                                    £{Object.values(editedBooking.partItemsPrices || {})
                                                        .reduce((sum, priceObj) => sum + (priceObj.price || 0), 0)
                                                        .toFixed(2)}
                                                </span>
                                            </div>
                                            <div className="text-xs text-gray-500 text-right">
                                                {editedBooking.partItems.length} part{editedBooking.partItems.length !== 1 ? 's' : ''} selected
                                            </div>
                                        </div>
                                    </div>
                                ) : (
                                    <p className="text-gray-500 text-sm italic">No parts added</p>
                                )}
                            </div>

                            {/* Schedules Section */}
                            <div className="mb-6">
                                <h4 className="text-sm font-semibold uppercase text-gray-600 border-b pb-2 mb-3">
                                    Schedules ({editedBooking.schedules.length})
                                </h4>
                                {editedBooking.schedules.length > 0 ? (
                                    <div className="space-y-2">
                                        {editedBooking.schedules.map(schedule => (
                                            <div key={schedule.id} className="bg-gray-50 p-3 rounded">
                                                <div className="font-medium mb-1">{schedule.timeInterval}</div>
                                                <div className="text-sm text-gray-600">
                                                    Dates: {schedule.dates.join(', ')}
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                ) : (
                                    <p className="text-gray-500 text-sm italic">No schedules added</p>
                                )}
                            </div>

                            {/* Assignment Section - for admin only */}
                            {isAdmin && (
                                <div>
                                    <h4 className="text-sm font-semibold uppercase text-gray-600 border-b pb-2 mb-3">
                                        Assignment
                                    </h4>
                                    {editedBooking.mechanic ? (
                                        <div className="bg-indigo-50 p-3 rounded">
                                            <div className="flex items-center gap-2">
                                                <RiUserLine className="text-indigo-600" />
                                                <span className="font-medium">
                                                    {editedBooking.mechanic.firstName} {editedBooking.mechanic.lastName}
                                                </span>
                                            </div>
                                            <div className="text-sm text-gray-600 ml-6">{editedBooking.mechanic.email}</div>
                                            {editedBooking.mechanic.phone && (
                                                <div className="text-sm text-gray-600 ml-6">{editedBooking.mechanic.phone}</div>
                                            )}
                                        </div>
                                    ) : (
                                        <p className="text-gray-500 text-sm italic">No mechanic assigned</p>
                                    )}
                                </div>
                            )}

                            {/* Summary Section */}
                            <div className="mt-6 pt-4 border-t border-gray-200">
                                <div className="space-y-2">
                                    <div className="flex justify-between items-center text-sm">
                                        <span>Jobs Total:</span>
                                        <span>£{editedBooking.jobsPrices.reduce((sum, jp) => sum + jp.price, 0).toFixed(2)}</span>
                                    </div>
                                    <div className="flex justify-between items-center text-sm">
                                        <span>Parts Total:</span>
                                        <span>
                                            £{Object.values(editedBooking.partItemsPrices || {})
                                                .reduce((sum, priceObj) => sum + (priceObj.price || 0), 0)
                                                .toFixed(2)}
                                        </span>
                                    </div>
                                    <div className="border-t border-gray-300 pt-2">
                                        <div className="flex justify-between items-center text-sm">
                                            <span>Subtotal:</span>
                                            <span>
                                                £{(
                                                    editedBooking.jobsPrices.reduce((sum, jp) => sum + jp.price, 0) +
                                                    Object.values(editedBooking.partItemsPrices || {})
                                                        .reduce((sum, priceObj) => sum + (priceObj.price || 0), 0)
                                                ).toFixed(2)}
                                            </span>
                                        </div>
                                        <div className="flex justify-between items-center text-sm">
                                            <span>VAT (20%):</span>
                                            <span>
                                                £{(
                                                    (editedBooking.jobsPrices.reduce((sum, jp) => sum + jp.price, 0) +
                                                    Object.values(editedBooking.partItemsPrices || {})
                                                        .reduce((sum, priceObj) => sum + (priceObj.price || 0), 0)) * 0.20
                                                ).toFixed(2)}
                                            </span>
                                        </div>
                                        <div className="border-t border-gray-300 pt-2 mt-2">
                                            <div className="flex justify-between items-center">
                                                <span className="font-semibold">Total Price (inc. VAT):</span>
                                                <span className="font-bold text-lg">
                                                    £{(
                                                        (editedBooking.jobsPrices.reduce((sum, jp) => sum + jp.price, 0) +
                                                        Object.values(editedBooking.partItemsPrices || {})
                                                            .reduce((sum, priceObj) => sum + (priceObj.price || 0), 0)) * 1.20
                                                    ).toFixed(2)}
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div className="flex justify-between items-center text-sm text-gray-600 mt-3">
                                    <span>Status:</span>
                                    <span className={`px-2 py-0.5 rounded-full ${editedBooking.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                        editedBooking.status === 'assigned' ? 'bg-blue-100 text-blue-800' :
                                            editedBooking.status === 'completed' ? 'bg-green-100 text-green-800' :
                                                editedBooking.status === 'paid' ? 'bg-indigo-100 text-indigo-800' :
                                                    editedBooking.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                                                        'bg-gray-100 text-gray-800'
                                        }`}>
                                        {editedBooking.status}
                                    </span>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Jobs Tab */}
                    {activeTab === 'jobs' && (
                        <div>
                            <div className="flex justify-between items-center mb-6">
                                <div>
                                    <h3 className="text-lg font-medium">Jobs Library</h3>
                                    <p className="text-sm text-gray-500">Search, filter, and select jobs for this booking</p>
                                </div>
                                <div className="flex items-center gap-2">
                                    {/* View Mode Toggle */}
                                    <div className="flex bg-gray-100 rounded-lg p-1">
                                        <button
                                            onClick={() => setViewMode('grid')}
                                            className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${
                                                viewMode === 'grid' ? 'bg-white text-gray-900 shadow-sm' : 'text-gray-600 hover:text-gray-900'
                                            }`}
                                        >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
                                            </svg>
                                        </button>
                                        <button
                                            onClick={() => setViewMode('list')}
                                            className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${
                                                viewMode === 'list' ? 'bg-white text-gray-900 shadow-sm' : 'text-gray-600 hover:text-gray-900'
                                            }`}
                                        >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 10h16M4 14h16M4 18h16" />
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                            </div>

                            {/* Search and Filters */}
                            <div className="mb-6 space-y-4">
                                {/* Search Bar */}
                                <div className="relative">
                                    <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                                        <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
                                        </svg>
                                    </div>
                                    <input
                                        type="search"
                                        className="block w-full pl-10 pr-12 py-3 text-sm text-gray-900 border border-gray-300 rounded-lg bg-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                        placeholder="Search by job name, description, or category..."
                                        value={jobsSearchQuery}
                                        onChange={(e) => setJobsSearchQuery(e.target.value)}
                                    />
                                    {jobsSearchQuery && (
                                        <button
                                            onClick={() => setJobsSearchQuery('')}
                                            className="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600"
                                        >
                                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                                            </svg>
                                        </button>
                                    )}
                                </div>

                                {/* Sort and Actions Row */}
                                <div className="flex flex-wrap items-center justify-between gap-4">
                                    <div className="flex items-center gap-4">
                                        {/* Sort By */}
                                        <div className="flex items-center gap-2">
                                            <label className="text-sm font-medium text-gray-700">Sort by:</label>
                                            <select
                                                value={sortBy}
                                                onChange={(e) => setSortBy(e.target.value)}
                                                className="px-3 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                            >
                                                <option value="name">Name</option>
                                                <option value="duration">Duration</option>
                                                <option value="price">Price</option>
                                                <option value="category">Category</option>
                                            </select>
                                        </div>

                                        {/* Sort Order */}
                                        <button
                                            onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}
                                            className="flex items-center gap-1 px-3 py-1.5 text-sm text-gray-600 hover:text-gray-900 border border-gray-300 rounded-md hover:bg-gray-50"
                                        >
                                            {sortOrder === 'asc' ? (
                                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12" />
                                                </svg>
                                            ) : (
                                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 4h13M3 8h9m-9 4h9m5-4v12m0 0l-4-4m4 4l4-4" />
                                                </svg>
                                            )}
                                            {sortOrder === 'asc' ? 'A-Z' : 'Z-A'}
                                        </button>
                                    </div>

                                    {/* Filter Actions */}
                                    <div className="flex items-center gap-2">
                                        <button
                                            onClick={() => {
                                                setJobsSearchQuery('');
                                                setSortBy('name');
                                                setSortOrder('asc');
                                            }}
                                            className="px-3 py-1.5 text-sm text-gray-600 hover:text-gray-900 border border-gray-300 rounded-md hover:bg-gray-50"
                                        >
                                            Reset Filters
                                        </button>
                                        <span className="text-sm text-gray-500">
                                            {(() => {
                                                const filtered = availableJobs.filter(job => {
                                                    if (jobsSearchQuery.trim()) {
                                                        const search = jobsSearchQuery.toLowerCase();
                                                        return (
                                                            (job.name?.toLowerCase() ?? '').includes(search) ||
                                                            (job.description?.toLowerCase() ?? '').includes(search) ||
                                                            (job.category?.toLowerCase() ?? '').includes(search)
                                                        );
                                                    }
                                                    return true;
                                                });
                                                return filtered.length;
                                            })()} of {availableJobs.length} jobs
                                        </span>
                                    </div>
                                </div>
                            </div>

                            {/* Jobs Display */}
                            {isLoadingJobs ? (
                                <div className="flex justify-center items-center py-12">
                                    <Loader />
                                </div>
                            ) : jobsError ? (
                                <div className="text-center border border-red-200 bg-red-50 rounded-lg p-6 text-red-800">
                                    <div className="mb-2">
                                        <svg className="mx-auto h-12 w-12 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.314 16.5c-.77.833.192 2.5 1.732 2.5z" />
                                        </svg>
                                    </div>
                                    <h3 className="text-lg font-medium mb-2">Error Loading Jobs</h3>
                                    <p className="mb-4">{jobsError}</p>
                                    <button
                                        onClick={fetchAvailableJobs}
                                        className="inline-flex items-center px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
                                    >
                                        <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                                        </svg>
                                        Try Again
                                    </button>
                                </div>
                            ) : (
                                <>
                                    {(() => {
                                        // Filter and sort jobs
                                        const filtered = availableJobs.filter(job => {
                                            if (jobsSearchQuery.trim()) {
                                                const search = jobsSearchQuery.toLowerCase();
                                                return (
                                                    (job.name?.toLowerCase() ?? '').includes(search) ||
                                                    (job.description?.toLowerCase() ?? '').includes(search) ||
                                                    (job.category?.toLowerCase() ?? '').includes(search)
                                                );
                                            }
                                            return true;
                                        });

                                        // Sort jobs
                                        filtered.sort((a, b) => {
                                            let aValue: string | number = '';
                                            let bValue: string | number = '';

                                            switch (sortBy) {
                                                case 'name':
                                                    aValue = a.name?.toLowerCase() || '';
                                                    bValue = b.name?.toLowerCase() || '';
                                                    break;
                                                case 'duration':
                                                    aValue = a.duration || 0;
                                                    bValue = b.duration || 0;
                                                    break;
                                                case 'price':
                                                    aValue = a.priceForConsumer || 0;
                                                    bValue = b.priceForConsumer || 0;
                                                    break;
                                                case 'category':
                                                    aValue = a.category?.toLowerCase() || '';
                                                    bValue = b.category?.toLowerCase() || '';
                                                    break;
                                                default:
                                                    aValue = a.name?.toLowerCase() || '';
                                                    bValue = b.name?.toLowerCase() || '';
                                            }

                                            if (typeof aValue === 'string' && typeof bValue === 'string') {
                                                return sortOrder === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
                                            } else {
                                                return sortOrder === 'asc' ? (aValue as number) - (bValue as number) : (bValue as number) - (aValue as number);
                                            }
                                        });

                                        return filtered.length > 0 ? (
                                            <div className={`${viewMode === 'grid' 
                                                ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4' 
                                                : 'space-y-2'
                                            } max-h-96 overflow-y-auto`}>
                                                {filtered.map(job => {
                                                    const isAlreadyAdded = editedBooking.jobs.some(j => j.id === job.id);

                                                    return (
                                                        <div key={job.id} className={`border rounded-lg p-4 bg-white hover:shadow-md transition-shadow ${
                                                            isAlreadyAdded ? 'border-green-200 bg-green-50' : 'border-gray-200'
                                                        }`}>
                                                            {viewMode === 'grid' ? (
                                                                // Grid View
                                                                <>
                                                                    {/* Job Icon */}
                                                                    <div className="flex items-start gap-3 mb-3">
                                                                        <div className="flex-shrink-0">
                                                                            <div className="w-12 h-12 bg-gradient-to-br from-indigo-500 to-indigo-600 rounded-lg flex items-center justify-center">
                                                                                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                                                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                                                                </svg>
                                                                            </div>
                                                                        </div>

                                                                        <div className="flex-grow min-w-0">
                                                                            <h4 className="font-medium text-gray-900 truncate">{job.name}</h4>
                                                                            <p className="text-sm text-gray-600 line-clamp-2">{job.description}</p>
                                                                            
                                                                            {/* Category */}
                                                                            {job.category && (
                                                                                <div className="mt-1">
                                                                                    <span className="inline-block px-2 py-0.5 bg-blue-100 text-blue-800 text-xs rounded-full">
                                                                                        {job.category}
                                                                                    </span>
                                                                                </div>
                                                                            )}
                                                                        </div>
                                                                    </div>

                                                                    {/* Job Details */}
                                                                    <div className="mb-3 space-y-1">
                                                                        <div className="flex justify-between text-sm">
                                                                            <span className="text-gray-500">Duration:</span>
                                                                            <span className="font-medium">{job.duration} min</span>
                                                                        </div>
                                                                        <div className="flex justify-between text-sm">
                                                                            <span className="text-gray-500">Price/Hour:</span>
                                                                            <span className="font-medium">£{job.pricePerHour?.toFixed(2) ?? 'N/A'}</span>
                                                                        </div>
                                                                        <div className="flex justify-between text-sm">
                                                                            <span className="text-gray-500">Total:</span>
                                                                            <span className="font-bold text-gray-900">
                                                                                £{job.pricePerHour ? ((job.pricePerHour * job.duration) / 60).toFixed(2) : 'N/A'}
                                                                            </span>
                                                                        </div>
                                                                    </div>

                                                                    {/* Action Button */}
                                                                    <button
                                                                        onClick={() => {
                                                                            if (!isAlreadyAdded) {
                                                                                const totalJobPrice = job.pricePerHour ? (job.pricePerHour * job.duration) / 60 : 0;
                                                                                setEditedBooking({
                                                                                    ...editedBooking,
                                                                                    jobs: [...editedBooking.jobs, job],
                                                                                    jobsPrices: [
                                                                                        ...editedBooking.jobsPrices,
                                                                                        { id: job.id, price: totalJobPrice, duration: job.duration }
                                                                                    ]
                                                                                });
                                                                                toast.success(`Added ${job.name} to booking`);
                                                                            } else {
                                                                                toast.info(`${job.name} is already added`);
                                                                            }
                                                                        }}
                                                                        disabled={isAlreadyAdded}
                                                                        className={`w-full py-2 px-4 rounded-lg text-sm font-medium transition-colors ${
                                                                            isAlreadyAdded 
                                                                                ? 'bg-green-100 text-green-800 cursor-not-allowed' 
                                                                                : 'bg-indigo-600 text-white hover:bg-indigo-700'
                                                                        }`}
                                                                    >
                                                                        {isAlreadyAdded ? (
                                                                            <span className="flex items-center justify-center">
                                                                                <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                                                                                </svg>
                                                                                Added
                                                                            </span>
                                                                        ) : (
                                                                            <span className="flex items-center justify-center">
                                                                                <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                                                                </svg>
                                                                                Add to Booking
                                                                            </span>
                                                                        )}
                                                                    </button>
                                                                </>
                                                            ) : (
                                                                // List View
                                                                <div className="flex items-center justify-between">
                                                                    <div className="flex items-center gap-3 flex-grow">
                                                                        <div className="w-10 h-10 bg-gradient-to-br from-indigo-500 to-indigo-600 rounded-lg flex items-center justify-center flex-shrink-0">
                                                                            <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                                                            </svg>
                                                                        </div>
                                                                        <div className="flex-grow min-w-0">
                                                                            <h4 className="font-medium text-gray-900 truncate">{job.name}</h4>
                                                                            <p className="text-sm text-gray-600 truncate">{job.description}</p>
                                                                        </div>
                                                                    </div>
                                                                    
                                                                    <div className="flex items-center gap-4 flex-shrink-0">
                                                                        {job.category && (
                                                                            <span className="px-2 py-0.5 bg-blue-100 text-blue-800 text-xs rounded-full">
                                                                                {job.category}
                                                                            </span>
                                                                        )}
                                                                        <div className="text-right">
                                                                            <div className="text-sm font-bold text-gray-900">£{job.pricePerHour ? ((job.pricePerHour * job.duration) / 60).toFixed(2) : 'N/A'}</div>
                                                                            <div className="text-xs text-gray-500">{job.duration} min</div>
                                                                        </div>
                                                                        <button
                                                                            onClick={() => {
                                                                                if (!isAlreadyAdded) {
                                                                                    const totalJobPrice = job.pricePerHour ? (job.pricePerHour * job.duration) / 60 : 0;
                                                                                    setEditedBooking({
                                                                                        ...editedBooking,
                                                                                        jobs: [...editedBooking.jobs, job],
                                                                                        jobsPrices: [
                                                                                            ...editedBooking.jobsPrices,
                                                                                            { id: job.id, price: totalJobPrice, duration: job.duration }
                                                                                        ]
                                                                                    });
                                                                                    toast.success(`Added ${job.name} to booking`);
                                                                                } else {
                                                                                    toast.info(`${job.name} is already added`);
                                                                                }
                                                                            }}
                                                                            disabled={isAlreadyAdded}
                                                                            className={`px-3 py-1.5 rounded-lg text-sm font-medium transition-colors ${
                                                                                isAlreadyAdded 
                                                                                    ? 'bg-green-100 text-green-800 cursor-not-allowed' 
                                                                                    : 'bg-indigo-600 text-white hover:bg-indigo-700'
                                                                            }`}
                                                                        >
                                                                            {isAlreadyAdded ? 'Added' : 'Add'}
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                            )}
                                                        </div>
                                                    );
                                                })}
                                            </div>
                                        ) : (
                                            <div className="text-center border border-dashed border-gray-300 rounded-lg p-12">
                                                <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                                </svg>
                                                <h3 className="mt-4 text-lg font-medium text-gray-900">No jobs found</h3>
                                                <p className="mt-2 text-gray-500">
                                                    {jobsSearchQuery
                                                        ? 'Try adjusting your search criteria.'
                                                        : 'There are no jobs available.'
                                                    }
                                                </p>
                                                {jobsSearchQuery && (
                                                    <button
                                                        onClick={() => setJobsSearchQuery('')}
                                                        className="mt-4 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
                                                    >
                                                        Clear Search
                                                    </button>
                                                )}
                                            </div>
                                        );
                                    })()}
                                </>
                            )}

                            {/* Jobs Total Section */}
                            {editedBooking.jobs.length > 0 && (
                                <div className="mt-6 pt-4 border-t border-gray-200 bg-gray-50 rounded-lg p-4">
                                    <h4 className="text-sm font-semibold uppercase text-gray-600 mb-3">Selected Jobs Summary</h4>
                                    <div className="space-y-2">
                                        {editedBooking.jobs.map((job) => {
                                            const jobPrice = editedBooking.jobsPrices.find(jp => jp.id === job.id);
                                            const totalJobPrice = job.pricePerHour ? (job.pricePerHour * job.duration) / 60 : 0;
                                            
                                            return (
                                                <div key={job.id} className="flex justify-between items-center text-sm">
                                                    <div className="flex-grow">
                                                        <span className="font-medium">{job.name}</span>
                                                        <span className="text-gray-500 ml-2">({job.duration} min)</span>
                                                    </div>
                                                    <div className="flex items-center gap-2">
                                                        <div className="text-right">
                                                            <div className="font-medium">£{(jobPrice?.price || totalJobPrice).toFixed(2)}</div>
                                                            {job.pricePerHour && (
                                                                <div className="text-xs text-gray-500">
                                                                    £{job.pricePerHour.toFixed(2)}/hr
                                                                </div>
                                                            )}
                                                        </div>
                                                        <button
                                                            onClick={() => {
                                                                // Remove the job from jobs array
                                                                const updatedJobs = editedBooking.jobs.filter(j => j.id !== job.id);
                                                                // Remove from jobsPrices array
                                                                const updatedJobsPrices = editedBooking.jobsPrices.filter(jp => jp.id !== job.id);

                                                                setEditedBooking({
                                                                    ...editedBooking,
                                                                    jobs: updatedJobs,
                                                                    jobsPrices: updatedJobsPrices
                                                                });

                                                                toast.success(`Removed ${job.name} from booking`);
                                                            }}
                                                            className="text-red-600 hover:text-red-800 p-1 rounded-full hover:bg-red-50 flex-shrink-0"
                                                            title={`Remove ${job.name}`}
                                                        >
                                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                            </svg>
                                                        </button>
                                                    </div>
                                                </div>
                                            );
                                        })}
                                        <div className="border-t border-gray-300 pt-2 mt-3">
                                            <div className="flex justify-between items-center font-bold text-lg">
                                                <span>Total Jobs:</span>
                                                <span>£{editedBooking.jobsPrices.reduce((sum, jp) => sum + jp.price, 0).toFixed(2)}</span>
                                            </div>
                                            <div className="text-xs text-gray-500 text-right">
                                                Total Duration: {editedBooking.jobs.reduce((sum, job) => sum + job.duration, 0)} minutes
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            )}
                        </div>
                    )}

                    {/* Parts Tab */}
                    {activeTab === 'parts' && (
                        <div>
                            {/* Mode Toggle */}
                            <div className="flex justify-between items-center mb-6">
                                <div>
                                    <h3 className="text-lg font-medium">Parts Management</h3>
                                    <p className="text-sm text-gray-500">
                                        {partsMode === 'existing' 
                                            ? 'View and edit parts already in this booking' 
                                            : 'Search and add new parts to this booking'
                                        }
                                    </p>
                                </div>
                                <div className="flex bg-gray-100 rounded-lg p-1">
                                    <button
                                        onClick={() => setPartsMode('existing')}
                                        className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                                            partsMode === 'existing' 
                                                ? 'bg-white text-gray-900 shadow-sm' 
                                                : 'text-gray-600 hover:text-gray-900'
                                        }`}
                                    >
                                        Existing Parts ({editedBooking.partItems.length})
                                    </button>
                                    <button
                                        onClick={() => {
                                            setPartsMode('add-new');
                                            // Fetch available parts when switching to add-new mode
                                            if (availablePartItems.length === 0 && !isLoadingParts) {
                                                fetchAvailablePartItems();
                                            }
                                        }}
                                        className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                                            partsMode === 'add-new' 
                                                ? 'bg-white text-gray-900 shadow-sm' 
                                                : 'text-gray-600 hover:text-gray-900'
                                        }`}
                                    >
                                        Add New Parts
                                    </button>
                                </div>
                            </div>

                            {/* Existing Parts Mode */}
                            {partsMode === 'existing' && (
                                <div>
                                    {editedBooking.partItems.length > 0 ? (
                                        <div className="space-y-3">
                                            {editedBooking.partItems.map((part) => {
                                                const partPrice = editedBooking.partItemsPrices?.[part.id];
                                                const displayPrice = partPrice ? partPrice.price : part.priceForConsumer || 0;

                                                return (
                                                    <div key={part.id} className="bg-white rounded-lg p-4 border border-gray-200 shadow-sm">
                                                        <div className="flex items-start justify-between">
                                                            <div className="flex-1 min-w-0">
                                                                <div className="flex items-center gap-2 mb-2">
                                                                    <h4 className="text-sm font-medium text-gray-900">
                                                                        {part.title || part.name || 'Unknown Part'}
                                                                    </h4>
                                                                    {part.tier && (
                                                                        <span className={`px-2 py-0.5 text-xs font-medium rounded ${getTierBadgeClasses(part.tier)}`}>
                                                                            {part.tier}
                                                                        </span>
                                                                    )}
                                                                </div>
                                                                
                                                                {part.sku && (
                                                                    <p className="text-xs text-gray-500 font-mono mb-1">
                                                                        SKU: {part.sku}
                                                                    </p>
                                                                )}
                                                                
                                                                {part.description && (
                                                                    <p className="text-xs text-gray-600 mb-2">
                                                                        {part.description}
                                                                    </p>
                                                                )}
                                                                
                                                                {part.stockSummary && (
                                                                    <p className="text-xs text-gray-500">
                                                                        Stock: {part.stockSummary}
                                                                    </p>
                                                                )}
                                                            </div>
                                                            
                                                            <div className="flex items-center gap-3 ml-4">
                                                                <div className="text-right">
                                                                    <div className="text-sm font-semibold text-green-600">
                                                                        £{displayPrice.toFixed(2)}
                                                                    </div>
                                                                    {isAdmin && part.price && (
                                                                        <div className="text-xs text-gray-500">
                                                                            Cost: £{part.price.toFixed(2)}
                                                                        </div>
                                                                    )}
                                                                </div>
                                                                <button
                                                                    onClick={() => {
                                                                        // Remove the part from partItems array
                                                                        const updatedPartItems = editedBooking.partItems.filter(p => p.id !== part.id);
                                                                        // Remove the price from partItemsPrices object
                                                                        const updatedPrices = { ...editedBooking.partItemsPrices };
                                                                        delete updatedPrices[part.id];

                                                                        setEditedBooking({
                                                                            ...editedBooking,
                                                                            partItems: updatedPartItems,
                                                                            partItemsPrices: updatedPrices
                                                                        });

                                                                        toast.success(`Removed ${part.title || part.name} from booking`);
                                                                    }}
                                                                    className="text-red-600 hover:text-red-800 p-2 rounded-full hover:bg-red-50 flex-shrink-0"
                                                                    title={`Remove ${part.title || part.name}`}
                                                                >
                                                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                                    </svg>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                );
                                            })}
                                            
                                            {/* Total for existing parts */}
                                            <div className="border-t border-gray-300 pt-4 mt-4">
                                                <div className="flex justify-between items-center font-bold text-lg">
                                                    <span>Total Parts:</span>
                                                    <span className="text-green-600">
                                                        £{Object.values(editedBooking.partItemsPrices || {})
                                                            .reduce((sum, priceObj) => sum + (priceObj.price || 0), 0)
                                                            .toFixed(2)}
                                                    </span>
                                                </div>
                                                <div className="text-xs text-gray-500 text-right">
                                                    {editedBooking.partItems.length} part{editedBooking.partItems.length !== 1 ? 's' : ''} selected
                                                </div>
                                            </div>
                                        </div>
                                    ) : (
                                        <div className="text-center py-12 bg-gray-50 rounded-lg border border-gray-200">
                                            <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                                            </svg>
                                            <h3 className="mt-4 text-lg font-medium text-gray-900">No parts in this booking</h3>
                                            <p className="mt-2 text-sm text-gray-500">
                                                Switch to "Add New Parts" to add parts to this booking.
                                            </p>
                                            <button
                                                onClick={() => {
                                                    setPartsMode('add-new');
                                                    if (availablePartItems.length === 0 && !isLoadingParts) {
                                                        fetchAvailablePartItems();
                                                    }
                                                }}
                                                className="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                                            >
                                                <RiAddLine className="mr-2" />
                                                Add Parts
                                            </button>
                                        </div>
                                    )}
                                </div>
                            )}

                            {/* Add New Parts Mode */}
                            {partsMode === 'add-new' && (
                                <div>
                                    <div className="flex justify-between items-center mb-6">
                                        <div>
                                            <h4 className="text-md font-medium">Parts Library</h4>
                                            <p className="text-sm text-gray-500">Search, filter, and select parts for this booking</p>
                                        </div>
                                        <div className="flex items-center gap-2">
                                            {/* View Mode Toggle */}
                                            <div className="flex bg-gray-100 rounded-lg p-1">
                                                <button
                                                    onClick={() => setViewMode('grid')}
                                                    className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${
                                                        viewMode === 'grid' ? 'bg-white text-gray-900 shadow-sm' : 'text-gray-600 hover:text-gray-900'
                                                    }`}
                                                >
                                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
                                                    </svg>
                                                </button>
                                                <button
                                                    onClick={() => setViewMode('list')}
                                                    className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${
                                                        viewMode === 'list' ? 'bg-white text-gray-900 shadow-sm' : 'text-gray-600 hover:text-gray-900'
                                                    }`}
                                                >
                                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 10h16M4 14h16M4 18h16" />
                                                    </svg>
                                                </button>
                                            </div>

                                            {/* Group by Category Toggle */}
                                            <button
                                                onClick={() => setGroupByCategory(!groupByCategory)}
                                                className={`flex items-center gap-1 px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${
                                                    groupByCategory ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-600 hover:text-gray-900'
                                                }`}
                                                title={groupByCategory ? 'Disable category grouping' : 'Enable category grouping'}
                                            >
                                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 11H5m14-7H3a2 2 0 00-2 2v12a2 2 0 002 2h16a2 2 0 002-2V6a2 2 0 00-2-2z" />
                                                </svg>
                                                Group
                                            </button>
                                        </div>
                                    </div>

                                    {/* Search and Filters */}
                                    <div className="mb-6 space-y-4">
                                        {/* Search Bar */}
                                        <div className="relative">
                                            <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                                                <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
                                                </svg>
                                            </div>
                                            <input
                                                type="search"
                                                className="block w-full pl-10 pr-12 py-3 text-sm text-gray-900 border border-gray-300 rounded-lg bg-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                                placeholder="Search by name, SKU, category, or group..."
                                                value={partsSearchQuery}
                                                onChange={(e) => setPartsSearchQuery(e.target.value)}
                                            />
                                            {partsSearchQuery && (
                                                <button
                                                    onClick={() => setPartsSearchQuery('')}
                                                    className="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600"
                                                >
                                                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                                                    </svg>
                                                </button>
                                            )}
                                        </div>

                                        {/* Filter Row */}
                                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                                            {/* Tier Filter */}
                                            <div>
                                                <label className="block text-sm font-medium text-gray-700 mb-1">Tier</label>
                                                <select
                                                    value={selectedTier}
                                                    onChange={(e) => setSelectedTier(e.target.value)}
                                                    className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                                >
                                                    <option value="all">All Tiers</option>
                                                    {getUniqueTiers().map(tier => (
                                                        <option key={tier} value={tier}>{tier}</option>
                                                    ))}
                                                </select>
                                            </div>

                                            {/* Category Filter */}
                                            <div>
                                                <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
                                                <select
                                                    value={selectedCategory}
                                                    onChange={(e) => setSelectedCategory(e.target.value)}
                                                    className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                                >
                                                    <option value="all">All Categories</option>
                                                    {getUniqueCategories().map(category => (
                                                        <option key={category} value={category}>{category}</option>
                                                    ))}
                                                </select>
                                            </div>

                                            {/* Group Filter */}
                                            <div>
                                                <label className="block text-sm font-medium text-gray-700 mb-1">Group</label>
                                                <select
                                                    value={selectedGroup}
                                                    onChange={(e) => setSelectedGroup(e.target.value)}
                                                    className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                                >
                                                    <option value="all">All Groups</option>
                                                    {getUniqueGroups().map(group => (
                                                        <option key={group} value={group}>{group}</option>
                                                    ))}
                                                </select>
                                            </div>

                                            {/* Stock Filter */}
                                            <div>
                                                <label className="block text-sm font-medium text-gray-700 mb-1">Stock</label>
                                                <select
                                                    value={stockFilter}
                                                    onChange={(e) => setStockFilter(e.target.value)}
                                                    className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                                >
                                                    <option value="all">All Stock</option>
                                                    <option value="in-stock">In Stock</option>
                                                    <option value="out-of-stock">Out of Stock</option>
                                                </select>
                                            </div>
                                        </div>

                                        {/* Sort and Actions Row */}
                                        <div className="flex flex-wrap items-center justify-between gap-4">
                                            <div className="flex items-center gap-4">
                                                {/* Sort By */}
                                                <div className="flex items-center gap-2">
                                                    <label className="text-sm font-medium text-gray-700">Sort by:</label>
                                                    <select
                                                        value={sortBy}
                                                        onChange={(e) => setSortBy(e.target.value)}
                                                        className="px-3 py-1.5 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                                    >
                                                        <option value="name">Name</option>
                                                        <option value="sku">SKU</option>
                                                        <option value="price">Price</option>
                                                        <option value="tier">Tier</option>
                                                        <option value="category">Category</option>
                                                        <option value="stock">Stock Status</option>
                                                    </select>
                                                </div>

                                                {/* Sort Order */}
                                                <button
                                                    onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}
                                                    className="flex items-center gap-1 px-3 py-1.5 text-sm text-gray-600 hover:text-gray-900 border border-gray-300 rounded-md hover:bg-gray-50"
                                                >
                                                    {sortOrder === 'asc' ? (
                                                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12" />
                                                        </svg>
                                                    ) : (
                                                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 4h13M3 8h9m-9 4h9m5-4v12m0 0l-4-4m4 4l4-4" />
                                                        </svg>
                                                    )}
                                                    {sortOrder === 'asc' ? 'A-Z' : 'Z-A'}
                                                </button>
                                            </div>

                                            {/* Filter Actions */}
                                            <div className="flex items-center gap-2">
                                                <button
                                                    onClick={resetFilters}
                                                    className="px-3 py-1.5 text-sm text-gray-600 hover:text-gray-900 border border-gray-300 rounded-md hover:bg-gray-50"
                                                >
                                                    Reset Filters
                                                </button>
                                                <span className="text-sm text-gray-500">
                                                    {getFilteredAndSortedParts().length} of {availablePartItems.length} parts
                                                </span>
                                            </div>
                                        </div>
                                    </div>

                                    {/* Parts Display */}
                                    {isLoadingParts ? (
                                        <div className="flex justify-center items-center py-12">
                                            <Loader />
                                        </div>
                                    ) : partsError ? (
                                        <div className="text-center border border-red-200 bg-red-50 rounded-lg p-6 text-red-800">
                                            <div className="mb-2">
                                                <svg className="mx-auto h-12 w-12 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.314 16.5c-.77.833.192 2.5 1.732 2.5z" />
                                                </svg>
                                            </div>
                                            <h3 className="text-lg font-medium mb-2">Error Loading Parts</h3>
                                            <p className="mb-4">{partsError}</p>
                                            <button
                                                onClick={fetchAvailablePartItems}
                                                className="inline-flex items-center px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
                                            >
                                                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                                                </svg>
                                                Try Again
                                            </button>
                                        </div>
                                    ) : (
                                        <>
                                            {getFilteredAndSortedParts().length > 0 ? (
                                                groupByCategory ? (
                                                    // Grouped by Category View
                                                    <div className="space-y-6 max-h-96 overflow-y-auto">
                                                        {Object.entries(getGroupedPartsByCategory(getFilteredAndSortedParts())).map(([categoryName, categoryData]) => (
                                                            <div key={categoryName} className="space-y-3">
                                                                {/* Category Header */}
                                                                <div className="flex items-center gap-3 pb-2 border-b border-gray-200">
                                                                    {categoryData.categoryImage ? (
                                                                        <img 
                                                                            src={categoryData.categoryImage} 
                                                                            alt={categoryName}
                                                                            className="w-8 h-8 object-cover rounded-lg border"
                                                                            onError={(e) => {
                                                                                e.currentTarget.style.display = 'none';
                                                                            }}
                                                                        />
                                                                    ) : (
                                                                        <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
                                                                            <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 11H5m14-7H3a2 2 0 00-2 2v12a2 2 0 002 2h16a2 2 0 002-2V6a2 2 0 00-2-2z" />
                                                                            </svg>
                                                                        </div>
                                                                    )}
                                                                    <div>
                                                                        <h3 className="text-lg font-semibold text-gray-900">{categoryName}</h3>
                                                                        <p className="text-sm text-gray-500">{categoryData.parts.length} part{categoryData.parts.length !== 1 ? 's' : ''}</p>
                                                                    </div>
                                                                </div>

                                                                {/* Category Parts */}
                                                                <div className={`${viewMode === 'grid' 
                                                                    ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4' 
                                                                    : 'space-y-2'
                                                                }`}>
                                                                    {categoryData.parts.map(part => {
                                                                        const isAlreadyAdded = editedBooking.partItems.some(p => p.id === part.id);
                                                                        const isInStock = part.stockSummary?.toLowerCase().includes('in stock');

                                                                        return (
                                                                            <div key={part.id} className={`border rounded-lg p-4 bg-white hover:shadow-md transition-shadow ${
                                                                                isAlreadyAdded ? 'border-green-200 bg-green-50' : 'border-gray-200'
                                                                            }`}>
                                                                                {/* Part Image */}
                                                                                <div className="flex items-start gap-3 mb-3">
                                                                                    <div className="flex-shrink-0">
                                                                                        {part.img ? (
                                                                                            <img 
                                                                                                src={part.img} 
                                                                                                alt={part.title}
                                                                                                className="w-12 h-12 object-cover rounded-lg border"
                                                                                                onError={(e) => {
                                                                                                    e.currentTarget.style.display = 'none';
                                                                                                }}
                                                                                            />
                                                                                        ) : (
                                                                                            <div className="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center">
                                                                                                <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                                                                                                </svg>
                                                                                            </div>
                                                                                        )}
                                                                                    </div>

                                                                                    <div className="flex-grow min-w-0">
                                                                                        <h4 className="font-medium text-gray-900 truncate">{part.title}</h4>
                                                                                        <p className="text-sm text-gray-600">{part.sku}</p>
                                                                                        
                                                                                        {/* Groups */}
                                                                                        {part.groups && part.groups.length > 0 && (
                                                                                            <div className="flex flex-wrap gap-1 mt-1">
                                                                                                {part.groups.slice(0, 2).map((group, index) => (
                                                                                                    <span key={index} className="inline-block px-2 py-0.5 bg-blue-100 text-blue-800 text-xs rounded-full">
                                                                                                        {group}
                                                                                                    </span>
                                                                                                ))}
                                                                                                {part.groups.length > 2 && (
                                                                                                    <span className="inline-block px-2 py-0.5 bg-gray-100 text-gray-600 text-xs rounded-full">
                                                                                                        +{part.groups.length - 2}
                                                                                                    </span>
                                                                                                )}
                                                                                            </div>
                                                                                        )}
                                                                                    </div>
                                                                                </div>

                                                                                {/* Badges */}
                                                                                <div className="flex items-center gap-2 mb-3">
                                                                                    {part.tier && (
                                                                                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getTierBadgeClasses(part.tier)}`}>
                                                                                            {part.tier}
                                                                                        </span>
                                                                                    )}
                                                                                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                                                                        isInStock ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                                                                                    }`}>
                                                                                        {part.stockSummary || 'Unknown'}
                                                                                    </span>
                                                                                </div>

                                                                                {/* Pricing */}
                                                                                <div className="mb-3">
                                                                                    <div className="text-lg font-bold text-gray-900">
                                                                                        £{part.priceForConsumer?.toFixed(2) ?? 'N/A'}
                                                                                    </div>
                                                                                    {isAdmin && part.price && (
                                                                                        <div className="text-sm text-gray-500">
                                                                                            Cost: £{part.price.toFixed(2)}
                                                                                        </div>
                                                                                    )}
                                                                                </div>

                                                                                {/* Action Button */}
                                                                                <button
                                                                                    onClick={() => {
                                                                                        if (!isAlreadyAdded && isInStock) {
                                                                                            setEditedBooking({
                                                                                                ...editedBooking,
                                                                                                partItems: [...editedBooking.partItems, part],
                                                                                                partItemsPrices: {
                                                                                                    ...editedBooking.partItemsPrices,
                                                                                                    [part.id]: { price: part.priceForConsumer || 0 }
                                                                                                }
                                                                                            });
                                                                                            toast.success(`Added ${part.title} to booking`);
                                                                                        } else if (isAlreadyAdded) {
                                                                                            toast.info(`${part.title} is already added`);
                                                                                        } else {
                                                                                            toast.warning(`${part.title} is not in stock`);
                                                                                        }
                                                                                    }}
                                                                                    disabled={isAlreadyAdded || !isInStock}
                                                                                    className={`w-full py-2 px-4 rounded-lg text-sm font-medium transition-colors ${
                                                                                        isAlreadyAdded 
                                                                                            ? 'bg-green-100 text-green-800 cursor-not-allowed' 
                                                                                            : !isInStock
                                                                                                ? 'bg-gray-100 text-gray-500 cursor-not-allowed'
                                                                                                : 'bg-indigo-600 text-white hover:bg-indigo-700'
                                                                                    }`}
                                                                                >
                                                                                    {isAlreadyAdded ? (
                                                                                        <span className="flex items-center justify-center">
                                                                                            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                                                                                            </svg>
                                                                                            Added
                                                                                        </span>
                                                                                    ) : !isInStock ? (
                                                                                        'Out of Stock'
                                                                                    ) : (
                                                                                        <span className="flex items-center justify-center">
                                                                                            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                                                                            </svg>
                                                                                            Add to Booking
                                                                                        </span>
                                                                                    )}
                                                                                </button>
                                                                            </div>
                                                                        );
                                                                    })}
                                                                </div>
                                                            </div>
                                                        ) : (
                                                            // Ungrouped View
                                                            <div className={`${viewMode === 'grid' 
                                                                ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4' 
                                                                : 'space-y-2'
                                                            } max-h-96 overflow-y-auto`}>
                                                                {getFilteredAndSortedParts().map(part => {
                                                                    const isAlreadyAdded = editedBooking.partItems.some(p => p.id === part.id);
                                                                    const isInStock = part.stockSummary?.toLowerCase().includes('in stock');

                                                                    return (
                                                                        <div key={part.id} className={`border rounded-lg p-4 bg-white hover:shadow-md transition-shadow ${
                                                                            isAlreadyAdded ? 'border-green-200 bg-green-50' : 'border-gray-200'
                                                                        }`}>
                                                                            {/* Part content similar to above */}
                                                                            <div className="flex items-start gap-3 mb-3">
                                                                                <div className="flex-shrink-0">
                                                                                    {part.img ? (
                                                                                        <img 
                                                                                            src={part.img} 
                                                                                            alt={part.title}
                                                                                            className="w-12 h-12 object-cover rounded-lg border"
                                                                                            onError={(e) => {
                                                                                                e.currentTarget.style.display = 'none';
                                                                                            }}
                                                                                        />
                                                                                    ) : (
                                                                                        <div className="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center">
                                                                                            <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                                                                                            </svg>
                                                                                        </div>
                                                                                    )}
                                                                                </div>
                                                                                
                                                                                <div className="flex-grow min-w-0">
                                                                                    <h4 className="font-medium text-gray-900 truncate">{part.title}</h4>
                                                                                    <p className="text-sm text-gray-600">{part.sku}</p>
                                                                                    
                                                                                    {/* Category and Groups */}
                                                                                    {part.categoryTitle && (
                                                                                        <p className="text-xs text-gray-500 mt-1">{part.categoryTitle}</p>
                                                                                    )}
                                                                                    {part.groups && part.groups.length > 0 && (
                                                                                        <div className="flex flex-wrap gap-1 mt-1">
                                                                                            {part.groups.slice(0, 2).map((group, index) => (
                                                                                                <span key={index} className="inline-block px-2 py-0.5 bg-blue-100 text-blue-800 text-xs rounded-full">
                                                                                                    {group}
                                                                                                </span>
                                                                                            ))}
                                                                                            {part.groups.length > 2 && (
                                                                                                <span className="inline-block px-2 py-0.5 bg-gray-100 text-gray-600 text-xs rounded-full">
                                                                                                    +{part.groups.length - 2}
                                                                                                </span>
                                                                                            )}
                                                                                        </div>
                                                                                    )}
                                                                                </div>
                                                                            </div>

                                                                            {/* Badges */}
                                                                            <div className="flex items-center gap-2 mb-3">
                                                                                {part.tier && (
                                                                                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getTierBadgeClasses(part.tier)}`}>
                                                                                        {part.tier}
                                                                                    </span>
                                                                                )}
                                                                                <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                                                                    isInStock ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                                                                                }`}>
                                                                                    {part.stockSummary || 'Unknown'}
                                                                                </span>
                                                                            </div>

                                                                            {/* Pricing */}
                                                                            <div className="mb-3">
                                                                                <div className="text-lg font-bold text-gray-900">
                                                                                    £{part.priceForConsumer?.toFixed(2) ?? 'N/A'}
                                                                                </div>
                                                                                {isAdmin && part.price && (
                                                                                    <div className="text-sm text-gray-500">
                                                                                        Cost: £{part.price.toFixed(2)}
                                                                                    </div>
                                                                                )}
                                                                            </div>

                                                                            {/* Action Button */}
                                                                            <button
                                                                                onClick={() => {
                                                                                    if (!isAlreadyAdded && isInStock) {
                                                                                        setEditedBooking({
                                                                                            ...editedBooking,
                                                                                            partItems: [...editedBooking.partItems, part],
                                                                                            partItemsPrices: {
                                                                                                ...editedBooking.partItemsPrices,
                                                                                                [part.id]: { price: part.priceForConsumer || 0 }
                                                                                            }
                                                                                        });
                                                                                        toast.success(`Added ${part.title} to booking`);
                                                                                    } else if (isAlreadyAdded) {
                                                                                        toast.info(`${part.title} is already added`);
                                                                                    } else {
                                                                                        toast.warning(`${part.title} is not in stock`);
                                                                                    }
                                                                                }}
                                                                                disabled={isAlreadyAdded || !isInStock}
                                                                                className={`w-full py-2 px-4 rounded-lg text-sm font-medium transition-colors ${
                                                                                    isAlreadyAdded 
                                                                                        ? 'bg-green-100 text-green-800 cursor-not-allowed' 
                                                                                        : !isInStock
                                                                                            ? 'bg-gray-100 text-gray-500 cursor-not-allowed'
                                                                                            : 'bg-indigo-600 text-white hover:bg-indigo-700'
                                                                                }`}
                                                                            >
                                                                                {isAlreadyAdded ? (
                                                                                    <span className="flex items-center justify-center">
                                                                                        <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                                                                                        </svg>
                                                                                        Added
                                                                                    </span>
                                                                                ) : !isInStock ? (
                                                                                    'Out of Stock'
                                                                                ) : (
                                                                                    <span className="flex items-center justify-center">
                                                                                        <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                                                                        </svg>
                                                                                        Add to Booking
                                                                                    </span>
                                                                                )}
                                                                            </button>
                                                                        </div>
                                                                    );
                                                                })}
                                                            </div>
                                                        )
                                                    ) : (
                                                        <div className="text-center border border-dashed border-gray-300 rounded-lg p-12">
                                                            <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                                        </svg>
                                                        <h3 className="mt-4 text-lg font-medium text-gray-900">No parts found</h3>
                                                        <p className="mt-2 text-gray-500">
                                                            {partsSearchQuery || selectedTier !== 'all' || selectedCategory !== 'all' || selectedGroup !== 'all' || stockFilter !== 'all'
                                                                ? 'Try adjusting your search criteria or filters.'
                                                                : 'There are no parts available for this car.'
                                                            }
                                                        </p>
                                                        {(partsSearchQuery || selectedTier !== 'all' || selectedCategory !== 'all' || selectedGroup !== 'all' || stockFilter !== 'all') && (
                                                            <button
                                                                onClick={resetFilters}
                                                                className="mt-4 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
                                                            >
                                                                Clear All Filters
                                                            </button>
                                                        )}
                                                    </div>
                                                )}
                                            </>
                                        )}
                                    </div>
                                </div>
                            )}
                        </div>
                    )}

                    {/* Parts Total Section */}
                    {activeTab === 'parts' && editedBooking.partItems.length > 0 && (
                        <div className="mt-6 pt-4 border-t border-gray-200 bg-gray-50 rounded-lg p-4">
                            <h4 className="text-sm font-semibold uppercase text-gray-600 mb-3">Selected Parts Summary</h4>
                            <div className="space-y-2">
                                {editedBooking.partItems.map((part) => {
                                    const partPrice = editedBooking.partItemsPrices?.[part.id];
                                    const displayPrice = partPrice ? partPrice.price : part.priceForConsumer || 0;
                                    
                                    return (
                                        <div key={part.id} className="flex justify-between items-center text-sm">
                                            <div className="flex-grow">
                                                <span className="font-medium">{part.title}</span>
                                                <span className="text-gray-500 ml-2">({part.sku})</span>
                                                {part.tier && (
                                                    <span className={`ml-2 px-2 py-0.5 rounded-full text-xs ${getTierBadgeClasses(part.tier)}`}>
                                                        {part.tier}
                                                    </span>
                                                )}
                                            </div>
                                            <div className="flex items-center gap-2">
                                                <div className="text-right">
                                                    <div className="font-medium">£{displayPrice.toFixed(2)}</div>
                                                    {isAdmin && part.price && (
                                                        <div className="text-xs text-gray-500">
                                                            Cost: £{part.price.toFixed(2)}
                                                        </div>
                                                    )}
                                                </div>
                                                <button
                                                    onClick={() => {
                                                        // Remove the part from partItems array
                                                        const updatedPartItems = editedBooking.partItems.filter(p => p.id !== part.id);
                                                        // Remove the price from partItemsPrices object
                                                        const updatedPrices = { ...editedBooking.partItemsPrices };
                                                        delete updatedPrices[part.id];

                                                        setEditedBooking({
                                                            ...editedBooking,
                                                            partItems: updatedPartItems,
                                                            partItemsPrices: updatedPrices
                                                        });

                                                        toast.success(`Removed ${part.title} from booking`);
                                                    }}
                                                    className="text-red-600 hover:text-red-800 p-1 rounded-full hover:bg-red-50 flex-shrink-0"
                                                    title={`Remove ${part.title}`}
                                                >
                                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                    </svg>
                                                </button>
                                            </div>
                                        </div>
                                    );
                                })}
                                <div className="border-t border-gray-300 pt-2 mt-3">
                                    <div className="flex justify-between items-center font-bold text-lg">
                                        <span>Total Parts:</span>
                                        <span>
                                            £{Object.values(editedBooking.partItemsPrices || {})
                                                .reduce((sum, priceObj) => sum + (priceObj.price || 0), 0)
                                                .toFixed(2)}
                                        </span>
                                    </div>
                                    <div className="text-xs text-gray-500 text-right">
                                        {editedBooking.partItems.length} part{editedBooking.partItems.length !== 1 ? 's' : ''} selected
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}                     {/* Schedule Tab */}
                    {activeTab === 'schedule' && (
                        <div>
                            <div className="mb-6">
                                <h3 className="text-lg font-medium mb-2">Schedule Management</h3>
                                <p className="text-sm text-gray-500">Create time slots for this booking</p>
                            </div>

                            {/* Duration Warning */}
                            {editedBooking.jobs.length > 0 && (
                                <div className="mb-6 p-4 bg-amber-50 border border-amber-200 rounded-lg">
                                    <div className="flex items-start gap-3">
                                        <div className="flex-shrink-0">
                                            <svg className="w-5 h-5 text-amber-600 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.314 16.5c-.77.833.192 2.5 1.732 2.5z" />
                                            </svg>
                                        </div>
                                        <div>
                                            <h4 className="text-sm font-medium text-amber-800 mb-1">Duration Requirement</h4>
                                            <p className="text-sm text-amber-700">
                                                Each time interval must be at least <strong>{getTotalJobDuration()} minutes</strong> to accommodate all selected jobs.
                                            </p>
                                            <div className="mt-2 text-xs text-amber-600">
                                                Selected jobs: {editedBooking.jobs.map(job => `${job.name} (${job.duration}min)`).join(', ')}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            )}

                            {/* Add New Schedule Form */}
                            <div className="mb-8 p-6 bg-gray-50 rounded-lg border">
                                <h4 className="text-md font-medium mb-4 flex items-center gap-2">
                                    <svg className="w-5 h-5 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                    </svg>
                                    Add New Schedule
                                </h4>

                                {/* Time Selection */}
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-2">Start Time</label>
                                        <input
                                            type="time"
                                            value={newSchedule.startTime}
                                            onChange={(e) => setNewSchedule({ ...newSchedule, startTime: e.target.value })}
                                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-2">End Time</label>
                                        <input
                                            type="time"
                                            value={newSchedule.endTime}
                                            onChange={(e) => setNewSchedule({ ...newSchedule, endTime: e.target.value })}
                                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                                        />
                                    </div>
                                </div>

                                {/* Duration Display */}
                                <div className="mb-4 p-3 bg-white rounded-md border">
                                    <div className="flex justify-between items-center text-sm">
                                        <span className="text-gray-600">Selected Duration:</span>
                                        <span className={`font-medium ${
                                            getIntervalDuration(formatTimeInterval(newSchedule.startTime, newSchedule.endTime)) >= getTotalJobDuration()
                                                ? 'text-green-600'
                                                : 'text-red-600'
                                        }`}>
                                            {getIntervalDuration(formatTimeInterval(newSchedule.startTime, newSchedule.endTime))} minutes
                                        </span>
                                    </div>
                                    <div className="flex justify-between items-center text-sm mt-1">
                                        <span className="text-gray-600">Required Duration:</span>
                                        <span className="font-medium text-gray-900">{getTotalJobDuration()} minutes</span>
                                    </div>
                                </div>

                                {/* Date Selection */}
                                <div className="mb-4">
                                    <label className="block text-sm font-medium text-gray-700 mb-3">
                                        Select Dates ({newSchedule.selectedDates.length} selected)
                                    </label>
                                    <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-2 max-h-64 overflow-y-auto">
                                        {getNext30Days().map((day) => (
                                            <button
                                                key={day.date}
                                                type="button"
                                                onClick={() => handleDateToggle(day.date)}
                                                className={`p-2 text-sm rounded-md border transition-colors ${
                                                    newSchedule.selectedDates.includes(day.date)
                                                        ? 'bg-indigo-600 text-white border-indigo-600'
                                                        : day.isToday
                                                            ? 'bg-blue-50 text-blue-700 border-blue-200 hover:bg-blue-100'
                                                            : day.dayOfWeek === 0 || day.dayOfWeek === 6
                                                                ? 'bg-gray-50 text-gray-600 border-gray-200 hover:bg-gray-100'
                                                                : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                                                }`}
                                            >
                                                <div className="font-medium">{day.display.split(' ')[2]}</div>
                                                <div className="text-xs opacity-75">{day.display.split(' ')[0]}</div>
                                            </button>
                                        ))}
                                    </div>
                                </div>

                                {/* Error Messages */}
                                {scheduleErrors.length > 0 && (
                                    <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-md">
                                        <div className="flex items-start gap-2">
                                            <svg className="w-5 h-5 text-red-600 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                            </svg>
                                            <div>
                                                <h5 className="text-sm font-medium text-red-800 mb-1">Please fix the following errors:</h5>
                                                <ul className="text-sm text-red-700 space-y-1">
                                                    {scheduleErrors.map((error, index) => (
                                                        <li key={index}>• {error}</li>
                                                    ))}
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                )}

                                {/* Add Button */}
                                <div className="flex justify-end">
                                    <button
                                        onClick={handleAddNewSchedule}
                                        className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors flex items-center gap-2"
                                    >
                                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                        </svg>
                                        Add Schedule
                                    </button>
                                </div>
                            </div>

                            {/* Existing Schedules */}
                            <div>
                                <h4 className="text-md font-medium mb-4 flex items-center gap-2">
                                    <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3a1 1 0 012-2h4a1 1 0 012 2v4m-6 0h6m-6 0l-1 12a2 2 0 002 2h6a2 2 0 002-2L16 7m-6 0V3" />
                                    </svg>
                                    Current Schedules ({editedBooking.schedules.length})
                                </h4>

                                {editedBooking.schedules.length > 0 ? (
                                    <div className="space-y-3">
                                        {editedBooking.schedules.map((schedule, index) => {
                                            const intervalDuration = getIntervalDuration(schedule.timeInterval);
                                            const requiredDuration = getTotalJobDuration();
                                            const isValidDuration = intervalDuration >= requiredDuration;

                                            return (
                                                <div key={schedule.id} className={`p-4 rounded-lg border ${
                                                    isValidDuration ? 'bg-white border-gray-200' : 'bg-red-50 border-red-200'
                                                }`}>
                                                    <div className="flex justify-between items-start">
                                                        <div className="flex-grow">
                                                            <div className="flex items-center gap-3 mb-2">
                                                                <div className="flex items-center gap-2">
                                                                    <svg className="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                                    </svg>
                                                                    <span className="font-medium text-gray-900">{schedule.timeInterval}</span>
                                                                </div>
                                                                <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${
                                                                    isValidDuration 
                                                                        ? 'bg-green-100 text-green-800' 
                                                                        : 'bg-red-100 text-red-800'
                                                                }`}>
                                                                    {intervalDuration} min {isValidDuration ? '✓' : '⚠️'}
                                                                </span>
                                                            </div>
                                                            
                                                            <div className="flex items-start gap-2 mb-2">
                                                                <svg className="w-4 h-4 text-gray-500 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3a1 1 0 012-2h4a1 1 0 012 2v4m-6 0h6m-6 0l-1 12a2 2 0 002 2h6a2 2 0 002-2L16 7m-6 0V3" />
                                                                </svg>
                                                                <div className="flex flex-wrap gap-1">
                                                                    {schedule.dates.map((date, dateIndex) => (
                                                                        <span key={dateIndex} className="px-2 py-0.5 bg-blue-100 text-blue-800 text-xs rounded-full">
                                                                            {new Date(date).toLocaleDateString('en-GB', { 
                                                                                weekday: 'short', 
                                                                                month: 'short', 
                                                                                day: 'numeric' 
                                                                            })}
                                                                        </span>
                                                                    ))}
                                                                </div>
                                                            </div>

                                                            {!isValidDuration && (
                                                                <div className="text-sm text-red-600 mt-2">
                                                                    ⚠️ This time slot is too short. Need at least {requiredDuration} minutes for selected jobs.
                                                                </div>
                                                            )}
                                                        </div>

                                                        <button
                                                            onClick={() => handleRemoveScheduleNew(schedule.id)}
                                                            className="text-red-600 hover:text-red-800 p-2 rounded-full hover:bg-red-50 flex-shrink-0"
                                                            title="Remove schedule"
                                                        >
                                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                            </svg>
                                                        </button>
                                                    </div>
                                                </div>
                                            );
                                        })}
                                    </div>
                                ) : (
                                    <div className="text-center border border-dashed border-gray-300 rounded-lg p-8">
                                        <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3a1 1 0 012-2h4a1 1 0 012 2v4m-6 0h6m-6 0l-1 12a2 2 0 002 2h6a2 2 0 002-2L16 7m-6 0V3" />
                                        </svg>
                                        <h3 className="mt-4 text-lg font-medium text-gray-900">No schedules created</h3>
                                        <p className="mt-2 text-gray-500">
                                            Create your first schedule using the form above.
                                        </p>
                                    </div>
                                )}
                            </div>

                            {/* Schedule Summary */}
                            {editedBooking.schedules.length > 0 && (
                                <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
                                    <h5 className="text-sm font-medium text-blue-800 mb-2">Schedule Summary</h5>
                                    <div className="text-sm text-blue-700 space-y-1">
                                        <div>Total schedules: <strong>{editedBooking.schedules.length}</strong></div>
                                        <div>Total dates: <strong>{editedBooking.schedules.reduce((total, schedule) => total + schedule.dates.length, 0)}</strong></div>
                                        <div>
                                            Valid schedules: <strong>
                                                {editedBooking.schedules.filter(schedule => 
                                                    getIntervalDuration(schedule.timeInterval) >= getTotalJobDuration()
                                                ).length}
                                            </strong>
                                        </div>
                                    </div>
                                </div>
                            )}
                        </div>
                    )}

                    {/* Location Tab */}
                    {activeTab === 'location' && (
                        <div>
                            <h3 className="text-lg font-medium mb-4">Service Location</h3>
                            
                            <div className="space-y-6">
                                {/* Current Location Display */}
                                <div className="bg-gray-50 rounded-lg p-4">
                                    <h4 className="text-sm font-semibold uppercase text-gray-600 border-b pb-2 mb-3">
                                        Current Location
                                    </h4>
                                    {editedBooking.location?.postalCode ? (
                                        <div className="flex items-center gap-3">
                                            <div className="flex items-center gap-2">
                                                <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                                </svg>
                                                <span className="font-medium text-gray-900">{editedBooking.location.postalCode}</span>
                                            </div>
                                            <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                                                Valid
                                            </span>
                                        </div>
                                    ) : (
                                        <div className="flex items-center gap-2 text-gray-500">
                                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                            </svg>
                                            <span className="italic">No postal code set</span>
                                        </div>
                                    )}
                                </div>

                                {/* Postal Code Input */}
                                <div>
                                    <label htmlFor="postalCode" className="block text-sm font-medium text-gray-700 mb-2">
                                        Postal Code *
                                    </label>
                                    <div className="space-y-2">
                                        <input
                                            type="text"
                                            id="postalCode"
                                            name="postalCode"
                                            value={editedBooking.location?.postalCode || ''}
                                            onChange={(e) => {
                                                const value = e.target.value.toUpperCase();
                                                setEditedBooking({
                                                    ...editedBooking,
                                                    location: {
                                                        ...editedBooking.location,
                                                        postalCode: value
                                                    }
                                                });
                                            }}
                                            placeholder="e.g., B1 1AA, CV1 2AB, LE1 3CD"
                                            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                                        />
                                        
                                        {/* Validation Messages */}
                                        {editedBooking.location?.postalCode && (
                                            <div className="space-y-1">
                                                {!zipCodeRegex.test(editedBooking.location.postalCode) && (
                                                    <p className="text-sm text-red-600 flex items-center gap-1">
                                                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                        </svg>
                                                        Invalid UK postal code format
                                                    </p>
                                                )}
                                                {zipCodeRegex.test(editedBooking.location.postalCode) && !allowedPostCodeRegex.test(editedBooking.location.postalCode) && (
                                                    <p className="text-sm text-red-600 flex items-center gap-1">
                                                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                        </svg>
                                                        Service only available in Birmingham, Coventry, Leicester, Dudley, Wolverhampton and Walsall
                                                    </p>
                                                )}
                                                {zipCodeRegex.test(editedBooking.location.postalCode) && allowedPostCodeRegex.test(editedBooking.location.postalCode) && (
                                                    <p className="text-sm text-green-600 flex items-center gap-1">
                                                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                                                        </svg>
                                                        Valid postal code
                                                    </p>
                                                )}
                                            </div>
                                        )}
                                    </div>
                                </div>

                                {/* Service Area Information */}
                                <div className="bg-blue-50 rounded-lg p-4 border border-blue-200">
                                    <h4 className="text-sm font-medium text-blue-800 mb-2 flex items-center gap-2">
                                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        </svg>
                                        Service Areas
                                    </h4>
                                    <p className="text-sm text-blue-700 mb-3">
                                        We currently provide mobile mechanic services in the following areas:
                                    </p>
                                    <div className="grid grid-cols-2 gap-2 text-sm text-blue-700">
                                        <div className="flex items-center gap-1">
                                            <span className="w-1 h-1 bg-blue-600 rounded-full"></span>
                                            Birmingham (B)
                                        </div>
                                        <div className="flex items-center gap-1">
                                            <span className="w-1 h-1 bg-blue-600 rounded-full"></span>
                                            Coventry (CV)
                                        </div>
                                        <div className="flex items-center gap-1">
                                            <span className="w-1 h-1 bg-blue-600 rounded-full"></span>
                                            Leicester (LE)
                                        </div>
                                        <div className="flex items-center gap-1">
                                            <span className="w-1 h-1 bg-blue-600 rounded-full"></span>
                                            Dudley (DY)
                                        </div>
                                        <div className="flex items-center gap-1">
                                            <span className="w-1 h-1 bg-blue-600 rounded-full"></span>
                                            Wolverhampton (WV)
                                        </div>
                                        <div className="flex items-center gap-1">
                                            <span className="w-1 h-1 bg-blue-600 rounded-full"></span>
                                            Walsall (WS)
                                        </div>
                                    </div>
                                </div>

                                {/* Location Summary */}
                                <div className="bg-gray-50 rounded-lg p-4">
                                    <h4 className="text-sm font-semibold uppercase text-gray-600 border-b pb-2 mb-3">
                                        Location Summary
                                    </h4>
                                    <div className="space-y-2 text-sm">
                                        <div className="flex justify-between">
                                            <span className="text-gray-600">Postal Code:</span>
                                            <span className="font-medium">
                                                {editedBooking.location?.postalCode || 'Not set'}
                                            </span>
                                        </div>
                                        <div className="flex justify-between">
                                            <span className="text-gray-600">Service Available:</span>
                                            <span className={`font-medium ${
                                                editedBooking.location?.postalCode && 
                                                zipCodeRegex.test(editedBooking.location.postalCode) && 
                                                allowedPostCodeRegex.test(editedBooking.location.postalCode)
                                                    ? 'text-green-600' 
                                                    : 'text-red-600'
                                            }`}>
                                                {editedBooking.location?.postalCode && 
                                                 zipCodeRegex.test(editedBooking.location.postalCode) && 
                                                 allowedPostCodeRegex.test(editedBooking.location.postalCode)
                                                    ? 'Yes' 
                                                    : 'No'}
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Assignment Tab */}
                    {activeTab === 'assignment' && (
                        <div>
                            {/* Assignment content */}
                        </div>
                    )}
                </div>

                {/* Footer with buttons */}
                <div className="mt-8 flex justify-end space-x-3">
                    <button
                        onClick={onClose}
                        className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                    >
                        Cancel
                    </button>
                    <button
                        onClick={handleSave}
                        className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 flex items-center"
                    >
                        <RiSaveLine className="mr-1" />
                        Save Booking
                    </button>
                </div>
            </div>
        </div>
    );
}; 