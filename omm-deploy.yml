apiVersion: v1
kind: Deployment
metadata:
  name: client-auth-mern-zustand
  labels:
    app: client-auth-mern-zustand
    version: v1.0.0

spec:
  replicas: 1

  build:
    context: .
    dockerfile: |
      FROM node:22-alpine AS builder
      WORKDIR /app
      COPY package*.json ./
      RUN npm ci --only=production
      COPY . .
      RUN npm run build

      FROM nginx:alpine
      COPY --from=builder /app/dist /usr/share/nginx/html
      COPY nginx.conf /etc/nginx/nginx.conf
      EXPOSE 80
      CMD ["nginx", "-g", "daemon off;"]

  environment:
    NODE_ENV: production
    NODE_VERSION: "22"

  deployment:
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 1
        maxSurge: 1

    containers:
      - name: client-auth-app
        image: client-auth-mern-zustand:latest
        ports:
          - containerPort: 80
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"

  service:
    type: LoadBalancer
    ports:
      - port: 80
        targetPort: 80
        protocol: TCP

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: harton.digital
        paths:
          - path: /
            pathType: Prefix
      - host: www.harton.digital
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: harton-digital-tls
        hosts:
          - harton.digital
          - www.harton.digital

  healthcheck:
    httpGet:
      path: /
      port: 80
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  monitoring:
    enabled: true
    path: /metrics
    port: 80

  scaling:
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

  secrets:
    - name: aws-credentials
      keys:
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - S3_BUCKET_NAME
        - CLOUDFRONT_DISTRIBUTION_ID

  volumes:
    - name: nginx-config
      configMap:
        name: nginx-config
    - name: app-logs
      emptyDir: {}

  lifecycle:
    preStop:
      exec:
        command:
          [
            "/bin/sh",
            "-c",
            "nginx -s quit; while killall -0 nginx; do sleep 1; done",
          ]

  backup:
    enabled: false
    schedule: "0 2 * * *"
    retention: "7d"
